name: Deploy::Manual

on:
  workflow_dispatch:
    inputs:
      namespace:
        description: '部署环境[dev/test/prod]'
        required: true
        default: 'dev'
      use_cache:
        description: '是否使用 Maven 缓存'
        required: true
        default: 'true'
      deploy_chaos:
        description: '部署 Chaos'
        required: true
        default: 'true'
      deploy_gateway:
        description: '部署 Gateway'
        required: true
        default: 'true'
      deploy_sba:
        description: '部署 SBA'
        required: true
        default: 'true'
      deploy_sso:
        description: '部署 SSO'
        required: true
        default: 'true'

env:
  IMAGE_NAME: ${{ secrets.IMAGES_HUB_REGISTRY_URL }}/${{ secrets.IMAGES_HUB_NAMESPACES }}/demo
  IMAGES_HUB_REGISTRY_URL: ${{ secrets.IMAGES_HUB_REGISTRY_URL }}
  IMAGES_HUB_USER_NAME: ${{ secrets.IMAGES_HUB_USER_NAME }}
  IMAGES_HUB_PASSWORD: ${{ secrets.IMAGES_HUB_PASSWORD }}
  IMAGES_HUB_EMAIL: hocgin@gmail.com
  KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}


  IMAGE_CHAOS: ${{ secrets.IMAGES_HUB_REGISTRY_URL }}/${{ secrets.IMAGES_HUB_NAMESPACES }}/chaos
  IMAGE_GATEWAY: ${{ secrets.IMAGES_HUB_REGISTRY_URL }}/${{ secrets.IMAGES_HUB_NAMESPACES }}/gateway
  IMAGE_SSO_SERVER: ${{ secrets.IMAGES_HUB_REGISTRY_URL }}/${{ secrets.IMAGES_HUB_NAMESPACES }}/sso-server
  IMAGE_SPRING_BOOT_ADMIN: ${{ secrets.IMAGES_HUB_REGISTRY_URL }}/${{ secrets.IMAGES_HUB_NAMESPACES }}/spring-boot-admin

jobs:
  build-publish-deploy:
    runs-on: ubuntu-latest
    steps:
      # 拉取代码
      - name: Git Checkout Code
        uses: actions/checkout@v1
        id: git_checkout
      # 设置 JDK 环境
      - name: Set up JDK 12.0
        uses: actions/setup-java@v1
        with:
          java-version: 12.0
      # 缓存 Maven 仓库
      - name: Cache local Maven repository
        if: ${{ github.event.inputs.use_cache != 'false' }}
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      # 进行 Maven 编译
      - name: Build with Maven
        run: ./mvnw clean package -DskipTests --batch-mode
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      # 设置 Docker 编译环境
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      # 缓存 Docker 层
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      # 登陆 阿里云容器镜像中心
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          registry: ${{ env.IMAGES_HUB_REGISTRY_URL }}
          username: ${{ env.IMAGES_HUB_USER_NAME }}
          password: ${{ env.IMAGES_HUB_PASSWORD }}
      # 编译和发布镜像 => Gateway
      - name: Build & Push Docker Image::Gateway
        uses: docker/build-push-action@v2
        with:
          context: ./rabbit-gateway
          file: ./rabbit-gateway/Dockerfile
          push: true
          tags: ${{ env.IMAGE_GATEWAY }}:${{ steps.prep.outputs.version }}
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.name }}
      # 编译和发布镜像 => Services::Chaos
      - name: Build & Push Docker Image::Chaos
        uses: docker/build-push-action@v2
        with:
          context: ./rabbit-services/rabbit-service-chaos/rabbit-service-chaos-start
          file: ./rabbit-services/rabbit-service-chaos/rabbit-service-chaos-start/Dockerfile
          push: true
          tags: ${{ env.IMAGE_CHAOS }}:${{ steps.prep.outputs.version }}
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.name }}
      # 编译和发布镜像 => Services::SSO-Server
      - name: Build & Push Docker Image::SSO-Server
        uses: docker/build-push-action@v2
        with:
          context: ./rabbit-sso-server
          file: ./rabbit-sso-server/Dockerfile
          push: true
          tags: ${{ env.IMAGE_SSO_SERVER }}:${{ steps.prep.outputs.version }}
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.name }}
      # 编译和发布镜像 => Services::Spring-Boot-Admin
      - name: Build & Push Docker Image::Spring-Boot-Admin
        uses: docker/build-push-action@v2
        with:
          context: ./rabbit-spring-boot-admin
          file: ./rabbit-spring-boot-admin/Dockerfile
          push: true
          tags: ${{ env.IMAGE_SPRING_BOOT_ADMIN }}:${{ steps.prep.outputs.version }}
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.name }}

      # 设置 k8s 环境
      - name: Set up k8s Context
        uses: Azure/k8s-set-context@v1
        with:
          kubeconfig: ${{ env.KUBE_CONFIG }}
      # 配置 容器中心 账号/密码
      - name: Create Container Registry Secret
        uses: Azure/k8s-create-secret@v1
        with:
          namespace: ${{ steps.prep.outputs.env }}
          container-registry-url: ${{ env.IMAGES_HUB_REGISTRY_URL }}
          container-registry-username: ${{ env.IMAGES_HUB_USER_NAME }}
          container-registry-password: ${{ env.IMAGES_HUB_PASSWORD }}
          container-registry-email: ${{ env.IMAGES_HUB_EMAIL }}
          secret-name: k8s-secret
      # 部署到 Chaos
      - name: Deploy to k8s
        uses: Azure/k8s-deploy@v1
        with:
          if: ${{ github.event.inputs.deploy_chaos != 'false' }}
          namespace: ${{ github.event.inputs.namespace }}
          manifests: |
            manifests/deployment-chaos.yaml
          images: |
            ${{ env.IMAGE_CHAOS }}:${{ steps.prep.outputs.version }}
          imagepullsecrets: |
            k8s-secret
      # 部署到 gateway
      - name: Deploy to k8s
        uses: Azure/k8s-deploy@v1
        with:
          if: ${{ github.event.inputs.deploy_gateway != 'false' }}
          namespace: ${{ github.event.inputs.namespace }}
          manifests: |
            manifests/deployment-gateway.yaml
          images: |
            ${{ env.IMAGE_GATEWAY }}:${{ steps.prep.outputs.version }}
          imagepullsecrets: |
            k8s-secret
      # 部署到 sso
      - name: Deploy to k8s
        uses: Azure/k8s-deploy@v1
        with:
          if: ${{ github.event.inputs.deploy_sso != 'false' }}
          namespace: ${{ github.event.inputs.namespace }}
          manifests: |
            manifests/deployment-sso-server.yaml
          images: |
            ${{ env.IMAGE_SSO_SERVER }}:${{ steps.prep.outputs.version }}
          imagepullsecrets: |
            k8s-secret
      # 部署到 sba
      - name: Deploy to k8s
        uses: Azure/k8s-deploy@v1
        with:
          if: ${{ github.event.inputs.deploy_sba != 'false' }}
          namespace: ${{ github.event.inputs.namespace }}
          manifests: |
            manifests/deployment-spring-boot-admin.yaml
          images: |
            ${{ env.IMAGE_SPRING_BOOT_ADMIN }}:${{ steps.prep.outputs.version }}
          imagepullsecrets: |
            k8s-secret
